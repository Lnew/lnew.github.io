[{"title":"在一组数中，找给定值Target最近的k个数","url":"/tech-notes/php-1563875831.html","content":"#### 已知一组升序数组，求与target最接近的k个数\n````\nfunction suanfa($arr,$target,$k){\n    if($arr==0||count($arr)==0){\n        return $arr;\n    }\n    $length = count($arr);\n    if($k>=$length){\n        return $arr;\n    }\n\n    //获取最近索引\n    $start = 0;\n    $end = $length - 1;\n    while ($start + 1 < $end){\n        $mid = $start + ($end - $start) / 2;\n        if ($arr[$mid] < $target) {\n            $start = $mid;\n        } else {\n            $end = $mid;\n        }\n    }\n    if ($target - $arr[$start] <= $arr[$end] - $target) {\n        $index = $start;\n    }else{\n        $index = $end;\n    }\n\n\n    $left = $index;\n    $right = $index+1;\n    $result=[];\n    //双指针，两个反向指针\n    for ($i = 0; $i < $k; $i++) {\n        //越界\n        if ($left < 0) {\n            $result[$i] = $arr[$right++];\n        } else if ($right >= $length) {  //越界\n            $result[$i] = $arr[$left--];\n        } else {\n            if ($target-$arr[$left] <= $arr[$right]-$target) {\n                $result[$i] = $arr[$left--];\n            } else {\n                $result[$i] = $arr[$right++];\n            }\n        }\n    }\n    return $result;\n}\n\n$arr = [1,2,3,4,5,6,7,8,9];\n$target = 4;\n$k = 3;\n$result = suanfa($arr,$target,$k);\nprint_r($result);\n````\n","tags":["Php"],"categories":["随笔"]},{"title":"Pandas处理csv数据入库二","url":"/tech-notes/pandas-1563334142.html","content":"\n#### python 环境-Anaconda 5.2.0\n#### 目录结构\n- sh201001d\n    - 20100104\n        - 600000_20100104.csv\n    - 20100105\n        - 600000_20100105.csv\n    - 20100106\n        - 600000_20100106.csv\n        \n\n````\n# -*- coding: utf-8 -*-\nimport os\n\nimport pandas as pd\n\nfrom sqlalchemy import create_engine\n\n#显示所有列\n#pd.set_option('display.max_columns', None)\n#显示所有行\n#pd.set_option('display.max_rows', None)\npd.set_option('display.float_format',lambda x : '%.2f' % x)\n\nfile_dir = \"D:\\\\BaiduNetdiskDownload\\\\2008-2018\\\\tick2010d\\\\sh201001d\"\nprefix = 'sh'\n# 数据库\nengine = create_engine('mysql+pymysql://root:@localhost:3306/gp_minute?charset=utf8&autocommit=true',echo=True)\n# 获取目录下所有文件名\ndef file_name(file_dir):\n    file_list= [([]) for i in range(2)]\n    for root,dirs,files in os.walk(file_dir):\n        if files:\n            file_list[0].append(root)\n            file_list[1].append(files)\n    return file_list\n    \nfiles = file_name(file_dir)\n#file = 'sh600000.csv'\nfor index in range(0,len(files[0])):\n    for file in files[1][index]:\n        table_name = prefix+file.split('_')[0]\n        raw = pd.read_csv('%s\\\\%s'%(files[0][index],file),names=['时间','成交笔数','成交额','成交量','方向'],encoding='GBK', skiprows=1,usecols=[2,4,5,6,7],header=None)\n        raw['时间'] = pd.to_datetime(raw['时间']).dt.strftime('%Y%m%d%H%M')\n        raw['成交量'] = raw['成交量']*100\n        #print(raw.head())\n        # 获取分组时间\n        result = raw.groupby(raw['时间']).size().reset_index().drop(columns=[0])\n        result.columns = ['s_datemin']\n        # 计算价格平均值--去掉成交量为零的行\n        s_price = raw.loc[raw['成交量']!=0]\n        s_price = (s_price['成交额'].groupby(s_price['时间']).mean()/(s_price['成交量']).groupby(s_price['时间']).mean()).reset_index(name='均成交额')\n        s_price.columns = ['s_datemin','s_price']\n        #print(s_price[:5])\n        # 分割--B\n        b_result = raw.loc[raw['方向']=='B']\n        b_result = (b_result[['成交额','成交量','成交笔数']].groupby(b_result['时间']).sum()).reset_index()\n        #print(b_result[:5])\n        b_result.columns = ['s_datemin','s_bvalue','s_bshou','s_bci']\n        # 分割--S\n        s_result = raw.loc[raw['方向']=='S']\n        s_result = (s_result[['成交额','成交量','成交笔数']].groupby(s_result['时间']).sum()).reset_index()\n        #print(s_result[:5])\n        s_result.columns = ['s_datemin','s_svalue','s_sshou','s_sci']\n        # 分割--Z\n        z_result = raw.loc[~raw['方向'].isin(['B','S'])]\n        z_result = (z_result[['成交额','成交量','成交笔数']].groupby(z_result['时间']).sum()).reset_index()\n        #print(z_result[:5])\n        z_result.columns = ['s_datemin','s_zvalue','s_zshou','s_zci']\n        #合并数据\n        info = pd.merge(result,s_price,on='s_datemin',how='left')\n        info = pd.merge(info,b_result,on='s_datemin',how='left')\n        info = pd.merge(info,s_result,on='s_datemin',how='left')\n        info = pd.merge(info,z_result,on='s_datemin',how='left')\n        info.fillna(0,inplace=True)\n        info.ix[info['s_price'].isin(['inf']),'s_price']=0\n        info['s_price'] = info['s_price'].round(2)\n        # 创建数据库\n        #### 检测数据库是否存在\n        #table_name = file[:-4]\n        sql = 'SELECT table_name FROM information_schema.TABLES WHERE table_name = \"%s\"'%(table_name)\n        df = pd.read_sql_query(sql, engine)\n        if df.empty:\n            sql = '''\n            CREATE TABLE `%s` (\n              `s_id` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键自增',\n              `s_datemin` bigint(20) NULL COMMENT '分钟 201901010930 唯一',\n              `s_price` float(8,2) NULL COMMENT '价格，本分钟价格平均值',\n              `s_bvalue` bigint(20) NULL DEFAULT '0' COMMENT '本分钟买入金额，单位元',\n              `s_bshou` int(11) NULL DEFAULT '0' COMMENT '本分买入股票数 单位股',\n              `s_bci` int(11) NULL DEFAULT '0' COMMENT '本分钟 买入交易次数',\n              `s_svalue` bigint(20) NULL DEFAULT '0' COMMENT '本分钟 卖场价值 单位元',\n              `s_sshou` int(11) NULL DEFAULT '0' COMMENT '本分钟卖出 股票数',\n              `s_sci` int(11) NULL DEFAULT '0' COMMENT '本分卖出交易次数',\n              `s_zvalue` bigint(20) NULL DEFAULT '0' COMMENT '本分钟 中性成交金额 单位元',\n              `s_zshou` int(11) NULL DEFAULT '0' COMMENT '本分钟中性 股数',\n              `s_zci` int(11) NULL DEFAULT '0' COMMENT '本分钟 中性交易次数',\n               PRIMARY KEY (`s_id`),\n               UNIQUE KEY `s_datem` (`s_datemin`)\n            ) ENGINE=InnoDB  DEFAULT CHARSET=utf8 COMMENT='股票历史每分钟交易次及交易量' AUTO_INCREMENT=1 ;\n            '''%(table_name)\n            engine.execute(sql)\n        #else:\n            #sql = 'alter table `%s` modify column `s_bvalue` bigint(20),modify column `s_svalue` bigint(20),modify column `s_zvalue` bigint(20);'%(table_name)\n            #engine.execute(sql)\n        pd.io.sql.to_sql(info,table_name,con=engine,if_exists='append', index=False, chunksize=10000)\n        ## 删除已执行文件\n        os.remove('%s\\\\%s'%(files[0][index],file))\n````\n","tags":["Python"],"categories":["随笔"]},{"title":"初用Pandas操作记录","url":"/tech-notes/pandas-1562901077.html","content":"#### python 环境-Anaconda 5.2.0\n\n#### 目录结构\n- sz2008tick3\n    - sh600000.csv\n    - sh600001.csv\n    - sh600002.csv\n\n\n````\n# -*- coding: utf-8 -*-\nimport os\n\nimport pandas as pd\n\nfrom sqlalchemy import create_engine\n\n#显示所有列\n#pd.set_option('display.max_columns', None)\n#显示所有行\n#pd.set_option('display.max_rows', None)\npd.set_option('display.float_format',lambda x : '%.2f' % x)\n\nfile_dir = \"D:\\\\BaiduNetdiskDownload\\\\2008-2018\\\\tick2008y\\\\sz2008tick3\"\n# 数据库\nengine = create_engine('mysql+pymysql://root:@localhost:3306/gp_minute?charset=utf8&autocommit=true',echo=True)\n# 获取目录下所有文件名\ndef file_name(file_dir):\n    for root,dirs,files in os.walk(file_dir):\n        return files\n\nfiles = file_name(file_dir)\nfor file in files:\n    # 读取csv数据\n    raw = pd.read_csv('%s\\\\%s'%(file_dir,file),names=['时间','成交笔数','成交额','成交量','方向'],encoding='GBK', skiprows=1,usecols=[2,4,5,6,7],header=None)\n    # 格式化时间为需要格式\n    raw['时间'] = pd.to_datetime(raw['时间']).dt.strftime('%Y%m%d%H%M')\n    # 修改单位\n    raw['成交量'] = raw['成交量']*100\n    #print(raw.head())\n    # 获取分组时间\n    result = raw.groupby(raw['时间']).size().reset_index().drop(columns=[0])\n    result.columns = ['s_datemin']\n    # 计算价格平均值--去掉成交量为零的行\n    s_price = raw.loc[raw['成交量']!=0]\n    s_price = (s_price['成交额'].groupby(s_price['时间']).mean()/(s_price['成交量']).groupby(s_price['时间']).mean()).reset_index(name='均成交额')\n    s_price.columns = ['s_datemin','s_price']\n    #print(s_price[:5])\n    # 分割--B\n    b_result = raw.loc[raw['方向']=='B']\n    b_result = (b_result[['成交额','成交量','成交笔数']].groupby(b_result['时间']).sum()).reset_index()\n    #print(b_result[:5])\n    b_result.columns = ['s_datemin','s_bvalue','s_bshou','s_bci']\n    # 分割--S\n    s_result = raw.loc[raw['方向']=='S']\n    s_result = (s_result[['成交额','成交量','成交笔数']].groupby(s_result['时间']).sum()).reset_index()\n    #print(s_result[:5])\n    s_result.columns = ['s_datemin','s_svalue','s_sshou','s_sci']\n    # 分割--Z\n    z_result = raw.loc[~raw['方向'].isin(['B','S'])]\n    z_result = (z_result[['成交额','成交量','成交笔数']].groupby(z_result['时间']).sum()).reset_index()\n    #print(z_result[:5])\n    z_result.columns = ['s_datemin','s_zvalue','s_zshou','s_zci']\n    #合并数据\n    info = pd.merge(result,s_price,on='s_datemin',how='left')\n    info = pd.merge(info,b_result,on='s_datemin',how='left')\n    info = pd.merge(info,s_result,on='s_datemin',how='left')\n    info = pd.merge(info,z_result,on='s_datemin',how='left')\n    info.fillna(0,inplace=True)\n    info.ix[info['s_price'].isin(['inf']),'s_price']=0\n    info['s_price'] = info['s_price'].round(2)\n    # 创建数据库\n    #### 检测数据库是否存在\n    table_name = file[:-4]\n    sql = 'SELECT table_name FROM information_schema.TABLES WHERE table_name = \"%s\"'%(table_name)\n    df = pd.read_sql_query(sql, engine)\n    if df.empty:\n        sql = '''\n        CREATE TABLE `%s` (\n          `s_id` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键自增',\n          `s_datemin` bigint(20) NULL COMMENT '分钟 201901010930 唯一',\n          `s_price` float(8,2) NULL COMMENT '价格，本分钟价格平均值',\n          `s_bvalue` bigint(20) NULL DEFAULT '0' COMMENT '本分钟买入金额，单位元',\n          `s_bshou` int(11) NULL DEFAULT '0' COMMENT '本分买入股票数 单位股',\n          `s_bci` int(11) NULL DEFAULT '0' COMMENT '本分钟 买入交易次数',\n          `s_svalue` bigint(20) NULL DEFAULT '0' COMMENT '本分钟 卖场价值 单位元',\n          `s_sshou` int(11) NULL DEFAULT '0' COMMENT '本分钟卖出 股票数',\n          `s_sci` int(11) NULL DEFAULT '0' COMMENT '本分卖出交易次数',\n          `s_zvalue` bigint(20) NULL DEFAULT '0' COMMENT '本分钟 中性成交金额 单位元',\n          `s_zshou` int(11) NULL DEFAULT '0' COMMENT '本分钟中性 股数',\n          `s_zci` int(11) NULL DEFAULT '0' COMMENT '本分钟 中性交易次数',\n           PRIMARY KEY (`s_id`),\n           UNIQUE KEY `s_datem` (`s_datemin`)\n        ) ENGINE=InnoDB  DEFAULT CHARSET=utf8 COMMENT='股票历史每分钟交易次及交易量' AUTO_INCREMENT=1 ;\n        '''%(table_name)\n        engine.execute(sql)\n    else:\n        sql = 'alter table `%s` modify column `s_bvalue` bigint(20),modify column `s_svalue` bigint(20),modify column `s_zvalue` bigint(20);'%(table_name)\n        engine.execute(sql)\n    pd.io.sql.to_sql(info,table_name,con=engine,if_exists='append', index=False, chunksize=10000)\n    ## 删除已执行文件\n    os.remove('%s\\\\%s'%(file_dir,file))\n````\n","tags":["Python"],"categories":["随笔"]},{"title":"Mysql主从同步第二篇","url":"/tech-notes/mysql-1562661148.html","content":"#### 我遇到的问题\n- 第一次配好后，少备份了一个表，然后报错了\n    - 我的方法时新建表，结果有了更多错误\n    - 由于表太多，最后重做了！\n- 第二次吸取教训，用那几个表，同步那几个，在从数据库配置：replicate_wild_do_table=\n    - 这里遇到大坑，看网上说是用那几个表，表名之间逗号隔开\n    - 配好后，一切正常，过了一会发现虽然运行正常，但就是表没有变化\n    - 在网上找了好多方法，都不管用\n    - 抱着死的心理，我把配置重写了下，不再是replicate_wild_do_table=db.t1,db.t2这种\n    - 改成了 replicate_wild_do_table=db.t1  换行 replicate_wild_do_table=db.t2\n    - 奇迹发生了，可以了（我猜想第一次应该是把`[db.t1,db.t2]`整体看成表名了）😭\n- 接下来我发现数据有了缺失，我又不想重新搞主数据库\n    - 想到上次遇到主键冲突的错误\n    - 停止 STOP SLAVE;\n    - 重置 reset master; reset slave all  都在从数据库操作\n    - 充设事务号 SET SESSION GTID_NEXT = AUTOMATIC;\n    - 直接把主数据库现在的表导入到从数据库\n    - ``CHANGE MASTER TO\n                    MASTER_HOST='',\n                    MASTER_USER='',\n                    MASTER_PASSWORD='',\n                    MASTER_PORT=3306,\n                    MASTER_LOG_FILE='mysql-bin.000001',\n                    MASTER_LOG_POS=0,  这里一定要从头开始\n                    MASTER_CONNECT_RETRY=10;``\n    - 开启 start slave;\n    - 然后查看 SHOW SLAVE STATUS;\n    - 果不其然，有了主键冲突\n    - 记住提示的主键值，然后在表里删除大于等于的所有数据\n    - 停止 STOP SLAVE;开启 start slave;\n- 至此数据同步啦！！！","tags":["Mysql"],"categories":["随笔"]},{"title":"Mysql主从同步","url":"/tech-notes/mysql-1561613758.html","content":"#### 整理了下各环境mysql主从同步的配置方法\n\n> 2个MySQL服务配置主从\n````\n#####主数据库配置\n在[mysqld]配置段添加如下字段\n\nserver-id=1\nlog-bin=mysql-bin\nlog-slave-updates=1\nbinlog-do-db=  #需要同步的数据库,如果没有本行表示同步所有的数据库\nbinlog-ignore-db=mysql  #被忽略的数据\ninnodb-file-per-table =ON\nskip_name_resolve=ON\n\n在master机上为slave机添加一同步帐号\n mysql>grant replication slave on *.* to '用户'@'从数据库地址' identified by '密码';\n mysql>flush  privileges;\n重启mysql服务\n查看日志情况\nshow master logs\n|Log_name|File_size|\n|--------|---------|\n|mysql-bin.000016|177|\n|mysql-bin.000017|121680|\n|mysql-bin.000018|201|\n# 记住最后一行，从服务器开启同步要用到\n\n#####从数据库配置\n同样在[mysqld]字段下添加如下内容\n\nserver-id=2\nrelay-log= mysql-relay-bin\nread-only=1\nlog-slave-updates=1\nreplicate-do-db= #要同步的数据库,不写本行表示同步所有数据库\nreplicate-do-table= #要同步的表\ninnodb_file_per_table=ON\nskip_name_resolve=ON\n重启mysql服务\n#####从数据库执行命令\nCHANGE MASTER TO\nMASTER_HOST='主数据库地址',\nMASTER_USER='',\nMASTER_PASSWORD='',\nMASTER_PORT=3306,\n------在主数据库得到----------------\nMASTER_LOG_FILE='mysql-bin.000011',\nMASTER_LOG_POS=107,\n-----------------------------------\nMASTER_CONNECT_RETRY=10;\n启动\nstart slave\n停止\nstop slave\n重置\nreset slave all\n####错误排查\nshow slave status\n1. 出现Error 'Can't create database 'test‘; database exists'错误\nstop slave ;\nset GLOBAL sql_slave_skip_counter=1;\nstart slave;\n````\n#### 注意情况\n- 要确保主数据库3306端口允许外部访问，阿里服务器需要在安全策略添加3306端口\n- 安装宝塔面板，也要在安全里添加3306端口\n- 如果使用rds服务器，想把rds数据同步到自己数据库，直接把自己数据库配置为从数据库即可\n- 别忘了rds添加ip白名单\n#### 数据映射\n> 跨库表关联解决方法\n> 业务场景：关联不同数据库中的表的查询比如说，要关联的表是：机器A上的数据库A中的表A && 机器B上的数据库B中的表B。\n````\n采用的是基于mysql的federated引擎的建表方式\n建表语句示例：CREATE TABLE `table_name`(......) ENGINE =FEDERATED CONNECTION='mysql://[username]:[password]@[location]:[port]/[db-name]/[table-name]'\n前提条件：你的mysql得支持federated引擎（执行show engines;可以看到是否支持）。\n````\n#### 关于开启GTID主从复制 错误排查\n\n> SHOW SLAVE STATUS; 查看GTID错误时的编号\n\n- mysql>  STOP SLAVE;\n- mysql> RESET MASTER;\n- mysql>  SET @@GLOBAL.GTID_PURGED ='d09c4417-7238-11e9-816b-ec0d9a7173e0:1-3231547'\n- mysql>  START SLAVE;\n- mysql>  SHOW SLAVE STATUS;\n","tags":["Php","Mysql"],"categories":["随笔"]},{"title":"windows在PowerShell使用curl的不同","url":"/tech-notes/cmd-1561450865.html","content":"````\ncURL -XGET 'localhost:9200/library/book/_search'\n\nwindows 里下面这样写\ncurl -Uri http://localhost:9200/library/book/_search -Method GET\n\n如果使https请求 可能会报下面这样的错误：\n    curl : 请求被中止: 未能创建 SSL/TLS 安全通道。\n    所在位置 行:1 字符: 1\n    + curl -Uri https://\n解决办法：\n在请求之前加这样一条命令：[System.Net.ServicePointManager]::SecurityProtocol=[System.Net.SecurityProtocolType]::Tls12\n我也不知道啥意思，反正不报错了！！！\ncurl -Uri https://\n````\n#### 像PowerShell不支持的符号[&&]，发现在cmd里运行是正常的！！！\n> 查半天资料，原来只要用cmd执行就可以了，一直以为PowerShell和cmd命令工具是一个东西，原来不一样。。。","tags":["Linux"],"categories":["随笔"]},{"title":"申请Https证书","url":"/tech-notes/https-1559802916.html","content":"#### 通过acme.sh方式获取证书的方法\n> centos 7 下操作\n\n````\n# 安装 acme.sh\ncurl https://get.acme.sh | sh\nsource ~/.bashrc\n# 替换成从阿里云后台获取的密钥\nexport Ali_Key=\"\"\nexport Ali_Secret=\"\"\n# 换成自己的域名\nacme.sh --issue --dns dns_ali -d lnews.top -d *.lnews.top\n# 成功后程序会通过定时任务自动更新证书\n# 开启acme.sh自动更新到最新版本\nacme.sh  --upgrade  --auto-upgrade\n# 关闭自动更新\nacme.sh --upgrade  --auto-upgrade  0\n````\n","tags":["Linux"],"categories":["随笔"]},{"title":"Php获取季度第一天和最后一天","url":"/tech-notes/php-1558072759.html","content":"````\n#返回本季度\nfunction  quarter_query($time){\n    $month = date('m',$time);\n    $quarter = floor(($month+2)/3);\n    return $quarter;\n}\n#返回本季度第一天\nfunction datetime_query_start($quarter,$date=false){\n    $start = mktime(0,0,0,($quarter - 1) *3 +1,1,date('Y'));\n    if($date){\n        return date('Ymd',$start);\n    }\n    return $start;\n}\n#返回本季度最后一天\nfunction datetime_query_end($quarter,$date=false){\n    $end = mktime(0,0,0,$quarter * 3,date('t',mktime(0, 0 , 0,$quarter*3,1,date(\"Y\"))),date('Y'));\n    if($date){\n        return date('Ymd',$end);\n    }\n    return $end;\n}\n````\n","tags":["Php"],"categories":["随笔"]},{"title":"开启Mysql慢日志","url":"/tech-notes/sql-1557369289.html","content":"#### 开启mysql慢日志功能，优化慢查询\n````\nwindows 找到 my.ini 文件\nlinux 找 my.cnf 文件\n添加\n[mysqld]\n;开启慢日志\nslow_query_log = ON\n;慢日志存放路径\nslow_query_log_file = \"d:/wamp/logs/sql_slow.log\"\n;超过 1s 记录\nlong_query_time = 1\n````","tags":["Mysql"],"categories":["随笔"]},{"title":"Php多线程请求接口","url":"/tech-notes/php-1556436528.html","content":"````\n/**\n * @param $url\n * @param $dataArr\n * @return array\n */\nfunction curl_multi_post($url,$dataArr){\n    $mh = curl_multi_init();\n    foreach($dataArr as $arr){\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch,CURLOPT_POST,1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $arr);\n        curl_multi_add_handle($mh,$ch);\n    }\n    $active = null;\n    $result = [];\n    do {\n        while (($mrc = curl_multi_exec($mh, $active)) == CURLM_CALL_MULTI_PERFORM) ;\n        if ($mrc != CURLM_OK) { break; }\n        while ($done = curl_multi_info_read($mh)) {\n            $info = curl_getinfo($done['handle']);\n            $error = curl_error($done['handle']);\n            $result[] = curl_multi_getcontent($done['handle']);\n            curl_multi_remove_handle($mh, $done['handle']);\n            curl_close($done['handle']);\n        }\n        if ($active > 0) {\n            curl_multi_select($mh);\n        }\n\n    } while ($active);\n    curl_multi_close($mh);\n    return $result;\n}\n````","tags":["Php"],"categories":["随笔"]},{"title":"Php根据某个键对二维数组排序","url":"/tech-notes/php-1556098240.html","content":"#### 封装了方法\n````\n/**\n * @param $arr\n * @param null $field  要排序的键\n * @param null $length 获取前多少条记录\n * @param $order  SORT_DESC|SORT_ASC\n * @return array|null\n */\nfunction sort_field_arr($arr,$field=null,$length=null,$order){\n    if(empty($field)){\n        return null;\n    }\n    //获取要排序的一维数组\n    $arr1 = array_column($arr,$field);\n    //排序\n    array_multisort($arr1,$order,$arr);\n    //返回长度\n    $arr2 = array_slice($arr,0,$length);\n    return $arr2;\n}\n````","tags":["Php"],"categories":["随笔"]},{"title":"PHP获取目录下所有文件","url":"/tech-notes/php-1555655333.html","content":"\n````\n# 目录地址\n$dir = \"\";\n$fname = [];\n$dir = iconv(\"utf-8\", \"gb2312\", $dir);\n if ($headle = opendir($dir)) {\n        while ($file = readdir($headle)) {\n            $file = iconv(\"gb2312\", \"utf-8\", $file);\n            $fname[] = $file;\n        }\n    }\n # 读取文件内容\n foreach($fname as $fn){\n    # file 把文件内容读取到数组\n    $data = file($dir.$fn);\n    // to do  \n }\n````\n","tags":["Php"],"categories":["随笔"]},{"title":"Php内存溢出爬坑","url":"/tech-notes/php-1554363041.html","content":"#### 内存溢出怕坑\n\n> 特点记录如下\n+ 查询sql数据时有时无\n+ 把sql粘到sql工具里数据正常\n+ 空白页面有时刷新下，会重新出现数据\n\n> 解决方法\n+ 增加临时内存`ini_set( 'memory_limit', '1000M' );`\n+ 增加超时时间`ini_set(\"max_execution_time\", \"3600\");`\n\n#### 检查了一上午sql语句，原来时这个原因，靠！","tags":["Php","Mysql"],"categories":["随笔"]},{"title":"Php合并键值相同的2个数组","url":"/tech-notes/php-1554272920.html","content":"#### 我的需求是把2个表的数据统计后，放在一个新的表里\n> 第一个数组\n````\n$arr1 = [\n    [\n        'mid'=>1,\n        'jh_num'=>32\n    ],[\n        'mid'=>2,\n        'jh_num'=>3\n    ],[\n        'mid'=>3,\n        'jh_num'=>5\n    ],[\n        'mid'=>4,\n        'jh_num'=>8\n    ],[\n        'mid'=>5,\n        'jh_num'=>13\n    ]\n]\n````\n> 第二个数组\n````\n$arr2 = [\n    [\n        'mid'=>2,\n        'dh_num'=>7\n    ],[\n        'mid'=>3,\n        'dh_num'=>23\n    ],[\n        'mid'=>4,\n        'dh_num'=>3\n    ],[\n        'mid'=>5,\n        'dh_num'=>1\n    ],[\n        'mid'=>6,\n        'dh_num'=>3\n    ],[\n        'mid'=>7,\n        'dh_num'=>34\n    ]\n]\n````\n> 操作\n````\n//提取mid\n$key1 = array_column($arr1,'mid');\n//用mid作键\n$arr1 = array_combine($key1,$arr1);\n//同上\n$key2 = array_column($arr2,'mid');\n$arr2 = array_combine($key2,$arr2);\n\n//合并提取的键\n$keys = array_keys(array_flip($key1)+array_flip($key2));\n$arr = []\n//遍历\nforeach ($keys as $key){\n        //没有值赋空数组（为了统一添加空键，可以不用）\n        if(empty($arr1[$key])){\n            $arr1[$key] = [\n                'jh_num' => ''\n            ];\n        }\n        if(empty($arr2[$key])){\n            $arr2[$key] = [\n                'dh_num' => ''\n            ];\n        }\n        $arr[] = array_merge($arr1[$key],$arr2[$key]);\n    }\nvar_dump($arr);\n\n//结果\narray (size=6)\n  0 => \n    array (size=3)\n      'mid' => string '1' (length=1)\n      'jh_num' => string '32' (length=2)\n      'dh_num' => string '' (length=0)\n  1 => \n    array (size=3)\n      'mid' => string '2' (length=1)\n      'jh_num' => string '3' (length=1)\n      'dh_num' => string '7' (length=1)\n  2 => \n    array (size=3)\n      'mid' => string '3' (length=1)\n      'jh_num' => string '5' (length=1)\n      'dh_num' => string '23' (length=2)\n  3 => \n    array (size=3)\n      'mid' => string '4' (length=1)\n      'jh_num' => string '8' (length=1)\n      'dh_num' => string '3' (length=1)\n  4 => \n    array (size=3)\n      'mid' => string '5' (length=1)\n      'jh_num' => string '13' (length=2)\n      'dh_num' => string '1' (length=1)\n  5 => \n    array (size=3)\n      'mid' => string '6' (length=1)\n      'jh_num' => string '' (length=0)\n      'dh_num' => string '3' (length=1)\n  5 => \n    array (size=3)\n      'mid' => string '7' (length=1)\n      'jh_num' => string '' (length=0)\n      'dh_num' => string '34' (length=2)\n````","tags":["Php"],"categories":["随笔"]},{"title":"微信小程序之音乐播放","url":"/tech-notes/wxmusic-1553936743.html","content":"####  图片的小程序为最终效果\n> ![image_text](/img/2019/wx_xcx.jpg)\n> 音乐api接口 `https://api.i-meto.com/meting/api?server=音乐平台&type=模式&id=歌曲id或歌单id` \n> 网上还有很多接口，大家可以参考，非常感谢【萨摩的API站】提供了接口\n\n> //music.js\n````\nconst backgroundAudioManager = wx.getBackgroundAudioManager()\nPage({\n\n  /**\n   * 页面的初始数据\n   */\n  data: {\n    isPlaying: false,\n    currentIndex: 0,\n    currentLry: 0,\n    marginTop: 0,\n    datalist: [],\n    progress: 0,\n    currentPosition: '00:00',\n    duration: '00:00',\n    song:'',\n    lry:''\n  },\n  /**\n   * 生命周期函数--监听页面加载\n   */\n  onLoad: function (options) {\n    let that = this\n    let currentIndex = options.currentIndex||0\n    wx.request({\n      url: '你的地址',\n      success: (res)=>{\n        console.log(res)\n        that.setData({\n          datalist: res.data,\n        })\n        that.onInit(currentIndex)\n      }\n    })\n  },\n\n  /**\n   * 生命周期函数--监听页面初次渲染完成\n   */\n  onReady: function () {\n\n  },\n\n  /**\n   * 生命周期函数--监听页面显示\n   */\n  onShow: function () {\n\n  },\n\n  /**\n   * 生命周期函数--监听页面隐藏\n   */\n  onHide: function () {\n\n  },\n\n  /**\n   * 生命周期函数--监听页面卸载\n   */\n  onUnload: function () {\n\n  },\n\n  /**\n   * 页面相关事件处理函数--监听用户下拉动作\n   */\n  onPullDownRefresh: function () {\n\n  },\n\n  /**\n   * 页面上拉触底事件的处理函数\n   */\n  onReachBottom: function () {\n\n  },\n\n  /**\n   * 用户点击右上角分享\n   */\n  onShareAppMessage: function () {\n    return {\n      title: this.data.song.name,\n      path: '/pages/music/music?currentIndex='+this.data.currentIndex,\n      imageUrl: this.data.song.cover,\n    }\n  },\n  parseLyric: function (lrc_s) {\n    if (lrc_s) {\n      lrc_s = lrc_s.replace(/([^\\]^\\n])\\[/g, (match, p1) => p1 + '\\n[');\n      const lyric = lrc_s.split('\\n');\n      let lrc = [];\n      const lyricLen = lyric.length;\n      for (let i = 0; i < lyricLen; i++) {\n        // match lrc time\n        const lrcTimes = lyric[i].match(/\\[(\\d{2}):(\\d{2})(\\.(\\d{2,3}))?]/g);\n        // match lrc text\n        const lrcText = lyric[i].replace(/.*\\[(\\d{2}):(\\d{2})(\\.(\\d{2,3}))?]/g, '').replace(/<(\\d{2}):(\\d{2})(\\.(\\d{2,3}))?>/g, '').replace(/^\\s+|\\s+$/g, '');\n\n        if (lrcTimes) {\n          // handle multiple time tag\n          const timeLen = lrcTimes.length;\n          for (let j = 0; j < timeLen; j++) {\n            const oneTime = /\\[(\\d{2}):(\\d{2})(\\.(\\d{2,3}))?]/.exec(lrcTimes[j]);\n            const min2sec = oneTime[1] * 60;\n            const sec2sec = parseInt(oneTime[2]);\n            const msec2sec = oneTime[4] ? parseInt(oneTime[4]) / ((oneTime[4] + '').length === 2 ? 100 : 1000) : 0;\n            const lrcTime = min2sec + sec2sec + msec2sec;\n            lrc.push([lrcTime, lrcText]);\n          }\n        }\n      }\n      // sort by time\n      lrc = lrc.filter((item) => item[1]);\n      lrc.sort((a, b) => a[0] - b[0]);\n      return lrc;\n    }\n    else {\n      return [];\n    }\n  },\n  sliceNull: function (lrc) {\n    var result = []\n    for (var i = 0; i < lrc.length; i++) {\n      if (lrc[i][1] == \"\") {\n      } else {\n        result.push(lrc[i]);\n      }\n    }\n    return result\n  },\n  timeToString: function (duration) {\n    let str = '';\n    let minute = parseInt(duration / 60) < 10 ? ('0' + parseInt(duration / 60)) : (parseInt(duration / 60));\n    let second = duration % 60 < 10 ? ('0' + duration % 60) : (duration % 60);\n    str = minute + ':' + second;\n    return str;\n  },\n  onInit: function(index){\n    let that = this\n    //设置当前播放\n    let song = this.data.datalist[index]\n    //获取歌词\n    wx.request({\n      url: song.lrc,\n      success: (res) => {\n        this.setData({\n          currentIndex: index,\n          song: song,\n          lry: that.sliceNull(that.parseLyric(res.data))\n        })\n        let lry = this.data.lry\n\n        backgroundAudioManager.src = this.data.song.url\n        backgroundAudioManager.title = this.data.song.name\n        backgroundAudioManager.singer = this.data.song.artist\n        backgroundAudioManager.coverImgUrl = this.data.song.cover\n        backgroundAudioManager.webUrl = '/pages/music/music?currentIndex='+this.data.currentIndex\n\n        backgroundAudioManager.onTimeUpdate(function () {\n          let currentTime = backgroundAudioManager.currentTime\n          let duration = backgroundAudioManager.duration\n          let index = that.data.currentLry\n          that.setData({\n            progress: currentTime / duration * 100,\n            currentPosition: that.timeToString(parseInt(currentTime)),\n            duration: that.timeToString(parseInt(duration))\n          })\n          if (index > lry.length - 1 || currentTime < lry[index][0] || (!lry[index + 1] || currentTime >= lry[index + 1][0])) {\n            for (let i = 0; i < lry.length; i++) {\n              if (currentTime >= lry[i][0] && (!lry[i + 1] || currentTime < lry[i + 1][0])) {\n                that.setData({\n                  currentLry: i,\n                  marginTop: i * 16\n                })\n              }\n            }\n          }\n          that.onEven()\n        });\n        that.onPlay()\n      }\n    })\n  },\n  selectSong: function(e){\n    let index = e.currentTarget.dataset.index\n    if(index==this.data.currentIndex) return;\n    this.onInit(index)\n    this.setData({\n      isPlaying: false\n    })\n  },\n  onPlay: function(){\n    backgroundAudioManager.play()\n    this.setData({\n      isPlaying: true\n    })\n  },\n  onPause: function(){\n    backgroundAudioManager.pause()\n    this.setData({\n      isPlaying: false\n    })\n  },\n  //监听播放事件\n  onEven: function(){\n    let that = this\n    backgroundAudioManager.onStop(function () {\n      that.setData({\n        isPlaying: false\n      })\n    })\n    backgroundAudioManager.onPlay(function () {\n      that.setData({\n        isPlaying: true\n      })\n    })\n    backgroundAudioManager.onPause(function () {\n      that.onPause()\n    })\n    backgroundAudioManager.onEnded(function () {\n      let length = that.data.datalist.length\n      let index = that.data.currentIndex + 1\n      if (index > length) {\n        backgroundAudioManager.stop()\n        this.setData({\n          isPlaying: false\n        })\n      } else {\n        that.onInit(index)\n      }\n    })\n    backgroundAudioManager.onNext(function(){\n      let length = that.data.datalist.length\n      let index = that.data.currentIndex + 1\n      if(index > length){\n        return\n      }else{\n        that.onInit(index)\n      }\n    })\n    backgroundAudioManager.onPrev(function () {\n      let index = that.data.currentIndex - 1\n      if (index < 0) {\n        return\n      } else {\n        that.onInit(index)\n      }\n    })\n  }\n})\n````\n\n> //music.wxml\n````\n<view class=\"aplayer aplayer-withlrc aplayer-withlist\">\n  <view class=\"aplayer-body\">\n    <view class=\"aplayer-pic\" style=\"background-image: url({{song.cover}});background-color: #ad7a86;\">\n      <view wx:if=\"{{!isPlaying}}\" class=\"aplayer-button aplayer-play\" bindtap='onPlay'>\n        <image src=\"/image/play.png\"></image>\n      </view>\n      <view wx:else class=\"aplayer-button aplayer-pause\" bindtap='onPause'>\n        <image src=\"/image/pause.png\"></image>\n      </view>\n    </view>\n    <view class=\"aplayer-info\">\n      <view class=\"aplayer-music\">\n        <text class=\"aplayer-title\">{{song.name}}</text>\n        <text class=\"aplayer-author\"> - {{song.artist}}</text>\n      </view>\n      <view class=\"aplayer-lrc\">\n        <scroll-view class=\"aplayer-lrc-contents\" scroll-y=\"true\" scroll-top=\"{{marginTop}}\">\n          <view wx:for=\"{{lry}}\" wx:key=\"index\" class=\"{{currentLry==index?'aplayer-lrc-current':''}}\">{{item[1]}}</view>\n        </scroll-view>\n      </view>\n      <view class=\"aplayer-controller\">\n        <view class=\"aplayer-bar-wrap\">\n          <progress  class=\"aplayer-bar\" stroke-width=\"2\" activeColor=\"#cdcdcd\" percent=\"{{progress}}\" />\n        </view>\n        <view class=\"aplayer-time\">\n          <view class=\"aplayer-time-inner\">\n            <text>{{currentPosition}}</text>\n            /\n            <text>{{duration}}</text>\n            <view class=\"aplayer-icon\" bindtap='onShareAppMessage'>❤</view>\n          </view>       \n        </view>\n      </view>\n    </view>\n  </view>\n  <view class=\"aplayer-list\">\n    <view wx:for=\"{{datalist}}\" wx:key=\"index\" bindtap='selectSong' data-index='{{index}}'>\n      <text class=\"aplayer-list-cur\" style=\"background-color: #ad7a86;{{currentIndex==index?'display:block':'display:none'}}\"></text>\n      <text class=\"aplayer-list-index\">{{index+1}}</text>\n      <text class=\"aplayer-list-title\">{{item.name}}</text>\n      <text class=\"aplayer-list-author\">{{item.artist}}</text>\n    </view>\n  </view>\n</view>\n````\n\n> //music.wxss  啊哈哈哈，这里直接把aplayer的样式复制过来，改了改\n> 我的样式写的垃圾的不行，有写的好的，希望能提供的精美的模板！！！\n````\n.aplayer {\n    background: #fff;\n    font-family: Arial,Helvetica,sans-serif;\n    margin: 5px;\n    box-shadow: 0 2px 2px 0 rgba(0,0,0,.07), 0 1px 5px 0 rgba(0,0,0,.1);\n    border-radius: 2px;\n    overflow: hidden;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    user-select: none;\n    line-height: normal;\n    position: relative;\n}\n.aplayer .aplayer-body {\n    position: relative;\n}\n.aplayer.aplayer-withlrc .aplayer-pic {\n    height: 90px;\n    width: 90px;\n}\n.aplayer .aplayer-pic {\n    position: relative;\n    float: left;\n    height: 66px;\n    width: 66px;\n    background-size: cover;\n    background-position: 50%;\n    transition: all .3s ease;\n    cursor: pointer;\n}\n.aplayer .aplayer-pic .aplayer-play {\n    width: 26px;\n    height: 26px;\n    border: 2px solid #fff;\n    bottom: 50%;\n    right: 50%;\n    margin: 0 -15px -15px 0;\n}\n.aplayer .aplayer-pic .aplayer-pause {\n    width: 16px;\n    height: 16px;\n    border: 2px solid #fff;\n    bottom: 4px;\n    right: 4px;\n}\n.aplayer .aplayer-pic .aplayer-play image{\n    position: absolute;\n    top: 3px;\n    left: 5px;\n    height: 20px;\n    width: 20px;\n}\n.aplayer .aplayer-pic .aplayer-pause image{\n    position: absolute;\n    top: 2px;\n    left: 2px;\n    height: 12px;\n    width: 12px;\n}\n.aplayer .aplayer-pic .aplayer-button {\n    position: absolute;\n    border-radius: 50%;\n    opacity: .8;\n    text-shadow: 0 1px 1px rgba(0,0,0,.2);\n    box-shadow: 0 1px 1px rgba(0,0,0,.2);\n    background: rgba(0,0,0,.2);\n    transition: all .1s ease;\n}\n.aplayer .aplayer-info {\n    margin-left: 66px;\n    padding: 14px 7px 0 10px;\n    height: 66px;\n    box-sizing: border-box;\n}\n.aplayer.aplayer-withlrc .aplayer-info {\n    margin-left: 90px;\n    height: 90px;\n    padding: 10px 7px 0;\n}\n.aplayer.aplayer-withlist .aplayer-info {\n    border-bottom: 1px solid #e9e9e9;\n}\n.aplayer .aplayer-info .aplayer-music {\n    overflow: hidden;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n    margin: 0 0 13px 5px;\n    -webkit-user-select: text;\n    -moz-user-select: text;\n    -ms-user-select: text;\n    user-select: text;\n    cursor: default;\n    padding-bottom: 2px;\n    height: 20px;\n}\n.aplayer .aplayer-info .aplayer-music .aplayer-title {\n    font-size: 14px;\n}\n.aplayer .aplayer-info .aplayer-music .aplayer-author {\n    font-size: 12px;\n    color: #666;\n}\n.aplayer .aplayer-lrc {\n    display: none;\n    position: relative;\n    height: 30px;\n    text-align: center;\n    overflow: hidden;\n    margin: -10px 0 7px;\n}\n\n.aplayer.aplayer-withlrc .aplayer-lrc {\n    display: block;\n}\n.aplayer .aplayer-lrc:before {\n    top: 0;\n    height: 10%;\n    background: linear-gradient(180deg,#fff 0,hsla(0,0%,100%,0));\n    filter: progid:DXImageTransform.Microsoft.gradient(startColorstr=\"#ffffff\", endColorstr=\"#00ffffff\", GradientType=0);\n}\n.aplayer .aplayer-lrc:after {\n    bottom: 0;\n    height: 33%;\n    background: linear-gradient(180deg,hsla(0,0%,100%,0) 0,hsla(0,0%,100%,.8));\n    filter: progid:DXImageTransform.Microsoft.gradient(startColorstr=\"#00ffffff\", endColorstr=\"#ccffffff\", GradientType=0);\n}\n.aplayer .aplayer-lrc:after, .aplayer .aplayer-lrc:before {\n    position: absolute;\n    z-index: 1;\n    display: block;\n    overflow: hidden;\n    width: 100%;\n    content: \" \";\n}\n.aplayer .aplayer-lrc .aplayer-lrc-contents {\n    width: 100%;\n    transition: all .5s ease-out;\n    -webkit-user-select: text;\n    -moz-user-select: text;\n    -ms-user-select: text;\n    user-select: text;\n    cursor: default;\n    height: 32px\n}\n.aplayer .aplayer-lrc view.aplayer-lrc-current {\n    opacity: 1;\n    overflow: visible;\n    height: auto!important;\n    min-height: 16px;\n}\n.aplayer .aplayer-lrc view {\n    font-size: 12px;\n    color: #666;\n    line-height: 16px!important;\n    height: 16px!important;\n    padding: 0!important;\n    margin: 0!important;\n    transition: all .5s ease-out;\n    opacity: .4;\n    overflow: hidden;\n}\n.aplayer .aplayer-info .aplayer-controller {\n    position: relative;\n    display: flex;\n}\n.aplayer .aplayer-info .aplayer-controller .aplayer-bar-wrap {\n    margin: 0 0 0 5px;\n    padding: 4px 0;\n    cursor: pointer!important;\n    flex: 1;\n}\n.aplayer .aplayer-info .aplayer-controller .aplayer-bar-wrap .aplayer-bar {\n    position: relative;\n    height: 2px;\n    width: 100%;\n    background: #cdcdcd;\n}\n.aplayer .aplayer-info .aplayer-controller .aplayer-time {\n    position: relative;\n    right: 0;\n    bottom: 4px;\n    height: 17px;\n    color: #999;\n    font-size: 11px;\n    padding-left: 7px;\n}\n.aplayer .aplayer-info .aplayer-controller .aplayer-time .aplayer-time-inner {\n    vertical-align: middle;\n}\n.aplayer .aplayer-info .aplayer-controller .aplayer-volume-wrap {\n    position: relative;\n    display: inline-block;\n    margin-left: 3px;\n    cursor: pointer!important;\n}\n.aplayer .aplayer-list {\n    transition: all .5s ease;\n    will-change: height;\n    overflow: hidden;\n}\n.aplayer .aplayer-list view:first-child {\n    border-top: none;\n}\n.aplayer .aplayer-list view {\n    position: relative;\n    height: 32px;\n    line-height: 32px;\n    padding: 0 15px;\n    font-size: 12px;\n    border-top: 1px solid #e9e9e9;\n    cursor: pointer;\n    transition: all .2s ease;\n    overflow: hidden;\n    margin: 0;\n}\n.aplayer .aplayer-list view .aplayer-list-cur {\n    display: none;\n    width: 3px;\n    height: 22px;\n    position: absolute;\n    left: 0;\n    top: 5px;\n    cursor: pointer;\n}\n.aplayer .aplayer-list view .aplayer-list-index {\n    color: #666;\n    margin-right: 12px;\n    cursor: pointer;\n}\n.aplayer .aplayer-list view .aplayer-list-author {\n    color: #666;\n    float: right;\n    cursor: pointer;\n}\n.aplayer .aplayer-icon {\n    width: 15px;\n    height: 15px;\n    border: none;\n    background-color: transparent;\n    outline: 0;\n    cursor: pointer;\n    opacity: .8;\n    vertical-align: middle;\n    padding: 0;\n    font-size: 12px;\n    margin: 0;\n    display: inline-block;\n    line-height: 15px;\n    text-align: center;\n    box-shadow: 0 2px 2px 0 rgba(0,0,0,.07), 0 1px 5px 0 rgba(0,0,0,.1);\n    color: red\n}\n````\n> 还有分享到朋友圈没有做，懒得研究了，有代码的小伙伴，提供一份吧！！！感谢！","tags":["音乐"],"categories":["随笔"]},{"title":"查看2个表不同的记录","url":"/tech-notes/sql-1553653512.html","content":"#### 查询2个日志表不同的记录\n````\nSELECT * FROM \n(SELECT f_mid,f_keyid,f_php_self,f_php_act,f_query_string,f_fromzd,f_ip,f_date,f_ctime FROM member_fangwen_log \nUNION ALL \nSELECT f_mid,f_keyid,f_php_self,f_php_act,f_query_string,f_fromzd,f_ip,f_date,f_ctime FROM member_fangwen_log_201903) tb1 \nGROUP BY f_mid,f_keyid,f_php_self,f_php_act,f_query_string,f_fromzd,f_ip,f_date,f_ctime HAVING count(*) = 1\n````\n> 合并起来只有一条的记录，当然是不相同的，如果要相同记录后面 `count(*)>1`","tags":["Mysql"],"categories":["随笔"]},{"title":"纯音乐","url":"/tech-notes/music-1553069533.html","content":"### 高清无损音乐，请前往[虾米音乐](https://www.xiami.com/)\n\n{% meting \"778066540\" \"xiami\" \"playlist\" \"mutex:true\" \"listmaxheight:340px\" \"preload:none\" \"theme:#ad7a86\" %}","tags":["音乐"],"categories":["随笔"]},{"title":"采集股票数据第二篇","url":"/caiji/caiji-1552983122.html","content":"#### 下面主要是针对【证券宝】接口的操作\n- [证券宝](http://baostock.com)是一个免费、开源的证券数据平台（无需注册）。\n\n#### 目录结构\n- application\n    - `__init__`.py\n    - init.py       `获取历史数据文件`\n    - common.py     `公共函数文件`\n    - index_pf.py   `季频盈利能力定时脚本`\n    - index_op.py   `季频运营能力定时脚本`\n    - Profit.py     `季频盈利能力模型`\n    - Operation.py  `季频运营能力模型`\n    - GpListInfo.py `股票列表模型`\n    \n#### GpListInfo.py\n````\n# coding:utf-8\nfrom sqlalchemy import Column, String,Integer, create_engine\n#from sqlalchemy.orm import sessionmaker\nfrom sqlalchemy.ext.declarative import declarative_base\n#from sqlalchemy import text\n\n# 创建对象的基类:\nBase = declarative_base()\n\nclass GpListInfo(Base):\n    __tablename__ = \"gp_list_info\"\n\n    id = Column(Integer, primary_key=True)\n    ts_code = Column(String(50))   \n    symbol = Column(String(50))        \n    name = Column(String(50))          \n    area = Column(String(50))         \n    industry = Column(String(50))     \n    fullname = Column(String(150))     \n    enname = Column(String(150))      \n    market = Column(String(50))        \n    exchange  = Column(String(50))     \n    curr_type  = Column(String(50))   \n    list_status  = Column(String(50)) \n    list_date  = Column(String(50))    \n    delist_date  = Column(String(50))  \n    is_hs  = Column(String(50))        \n\n    def __init__(self,cursor):\n        self.cursor = cursor\n\n    def get_list_info(self,sql):\n        return self.cursor.execute(sql).fetchall()\n    def set_list_info(self,sql):\n        return self.cursor.execute(sql)\n\n````\n#### Operation.py\n````\n# coding:utf-8\nfrom sqlalchemy import Column, String,Integer, create_engine\nfrom sqlalchemy.orm import sessionmaker\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy import text\nimport time\n\nBase = declarative_base()\nclass Operation(Base):\n    __tablename__ = \"gp_operation\"\n    id = Column(Integer, primary_key=True)\n    code = Column(String(50))\n    pubDate = Column(String(50))\n    statDate = Column(String(50))\n    NRTurnRatio = Column(String(50))\n    NRTurnDays = Column(String(50))\n    INVTurnRatio = Column(String(50))\n    INVTurnDays = Column(String(50))\n    CATurnRatio = Column(String(50))\n    AssetTurnRatio = Column(String(50))\n    year = Column(Integer)\n    quarter = Column(Integer)\n    ctime = Column(Integer)\n\n    def __init__(self,cursor):\n        self.cursor = cursor\n    def get_operation(self,sql):\n        return self.cursor.execute(sql).fetchall()\n    def set_operation(self,sql):\n        return self.cursor.execute(sql)\n    def query_data(self,bs,code,year,quarter):\n        operation_list = []\n        rs_operation = bs.query_operation_data(code=code, year=year, quarter=quarter)\n        while (rs_operation.error_code == '0') & rs_operation.next():\n             operation_list = rs_operation.get_row_data()\n        if(operation_list):\n            rs_operation.fields.append('year')\n            rs_operation.fields.append('quarter')\n            rs_operation.fields.append('ctime')\n            operation_list.append(year)\n            operation_list.append(quarter)\n            operation_list.append(int(time.time()))\n            sql = \"insert into %s (%s) values %s\" %(self.__tablename__,','.join(rs_profit.fields),tuple(operation_list))\n            self.set_operation(sql)\n        else:\n            return\n\n````\n#### Profit.py\n````\n# coding:utf-8\nfrom sqlalchemy import Column, String,Integer, create_engine\nfrom sqlalchemy.orm import sessionmaker\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy import text\nimport time\n\nBase = declarative_base()\nclass Profit(Base):\n    __tablename__ = \"gp_profit\"\n    id = Column(Integer, primary_key=True)\n    code = Column(String(50))\n    pubDate = Column(String(50))\n    statDate = Column(String(50))\n    roeAvg = Column(String(50))\n    npMargin = Column(String(50))\n    gpMargin = Column(String(50))\n    netProfit = Column(String(50))\n    epsTTM = Column(String(50))\n    MBRevenue = Column(String(50))\n    totalShare = Column(String(50))\n    liqaShare = Column(String(50))\n    year = Column(Integer)\n    quarter = Column(Integer)\n    ctime = Column(Integer)\n\n    def __init__(self,cursor):\n        self.cursor = cursor\n    def get_profit(self,sql):\n        return self.cursor.execute(sql).fetchall()\n    def set_profit(self,sql):\n        return self.cursor.execute(sql)\n    def query_data(self,bs,code,year,quarter):\n        profit_list = []\n        rs_profit = bs.query_profit_data(code=code, year=year, quarter=quarter)\n        while (rs_profit.error_code == '0') & rs_profit.next():\n             profit_list = rs_profit.get_row_data()           \n        if(profit_list):\n            rs_profit.fields.append('year')\n            rs_profit.fields.append('quarter')\n            rs_profit.fields.append('ctime')\n            profit_list.append(year)\n            profit_list.append(quarter)\n            profit_list.append(int(time.time()))        \n            sql = \"insert into %s (%s) values %s\" %(self.__tablename__,','.join(rs_profit.fields),tuple(profit_list))\n            self.set_profit(sql)\n        else:\n            return\n\n````\n#### common.py\n````\n# coding:utf-8\nimport baostock as bs\nimport time\nfrom sqlalchemy import create_engine\n#from sqlalchemy.orm import sessionmaker\nfrom application.GpListInfo import  *\n\n\n\ndef get_query_by_date():\n    localtime = time.localtime(time.time())\n    year,month = localtime[:2]\n    quarter = (month+2)//3\n    if(quarter==1):\n        return [(year-1,3),(year-1,4)]\n    if(quarter==2):\n        return [(year-1,4),(year,1)]\n    if(quarter==3):\n        return [(year,1),(year,2)]\n    if(quarter==4):\n        return [(year,2),(year,3)]\n\n# 查询有没有数据\ndef get_data(obj,code,year,quarter):\n    where = \" and code='%s' and year=%d and quarter=%d\" %(code,year,quarter)\n    res  = obj.cursor.execute(\"select * from %s where 1 %s\" %(obj.__tablename__,where))\n    if(res.rowcount==0):\n        #没查到，从接口获取\n        # 登陆系统\n        lg = bs.login()\n        obj.query_data(bs,code,year,quarter)\n        # 登出系统\n        bs.logout()\n\n# 数据库实例\ndef db():\n    engine = create_engine('mysql+pymysql://root:@localhost:3306/gupiao?charset=utf8&autocommit=true',echo=True)\n    return engine\n\n# 获取股票列表\ndef get_list_info():\n    gp = GpListInfo(db())\n    gp_list = gp.get_list_info(\"select * from %s\" %gp.__tablename__)\n    return gp_list\n\n\n````\n#### init.py\n````\n# coding:utf-8\nimport application.common as common\n\nimport baostock as bs\n\nfrom application.Profit import *\nfrom application.Operation import *\nfrom application.Growth import *\n\ndef insert_data(obj,list):\n    for row in gp_list:\n        code = row['ts_code']\n        for i in range(0,len(year)):\n            for j in range(0,4):\n                bs.login()\n                obj.query_data(bs,code,year[i],quarter[j])\n                bs.logout()\n\nyear = [2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018]\nquarter = [1,2,3,4]\n\n# 股票列表\ngp_list = common.get_list_info()\n\n# 季频盈利能力\npf = Profit(common.db())\n\n# 季频营运能力\nop = Operation(common.db())\ninsert_data(op,gp_list)\n\n\n````\n#### index_pf.py\n````\n# coding:utf-8\n# 季频盈利能力\nimport application.common as common\nfrom application.Profit import  *\n\n# 股票列表\ngp_list = common.get_list_info()\n\n# \npf = Profit(common.db())\n\nfor row in gp_list:\n    localtime = common.get_query_by_date()\n    for i in range(0,len(localtime)):\n        year = localtime[i][0]\n        quarter = localtime[i][1]\n\n        common.get_data(pf,row.ts_code,year,quarter)\n````\n#### index_op.py\n````\n# coding:utf-8\n# 季频营运能力\nimport application.common as common\nfrom application.Operation import  *\n\n# 股票列表\ngp_list = common.get_list_info()\n\n# \nop = Operation(common.db())\n\nfor row in gp_list:\n    localtime = common.get_query_by_date()\n    for i in range(0,len(localtime)):\n        year = localtime[i][0]\n        quarter = localtime[i][1]\n\n        common.get_data(op,row.ts_code,year,quarter)\n````\n\n#### 注意事项\n> 像这样的from application.Operation import  *，加载不进去，可以把application删了\n> from Operation import  * 这样加载\n\n> 运行 python3 init.py `[*]`","tags":["Python","采集"],"categories":["采集"]},{"title":"使用宝塔后安装Python3","url":"/tech-notes/pthon3-1552533607.html","content":"#### 在不影响宝塔面板的情况下，安装python3.6\n+ python更新迭代快，现在主流模块都是python版本3的，下载资源包\n> wget https://www.python.org/ftp/python/3.6.3/Python-3.6.0.tgz\n+ 解压\n> tar -zxvf Python-3.6.0.tgz\n+ 进入安装目录\n> cd Python-3.6.0\n+ 编译，后面一定要加上变异目录，防止覆盖影响宝塔面板正常运行\n> ./configure --prefix=/usr/local/python36\n> make && make install\n+ 建立软链接，也就是环境变量\n> ln -s  /usr/local/python36/bin/python3.6  /usr/bin/python3\n> ln -s  /usr/local/python36/bin/pip3.6  /usr/bin/pip3\n+ 现在就可以使用python3和pip3命令了\n#### 如果上面输入有误，可以覆盖，看自己情况\n> ln -snf  /usr/local/python36/bin/python3  /usr/bin/python3\n","tags":["Python"],"categories":["随笔"]},{"title":"采集股票数据第一篇","url":"/caiji/caiji-1552468822.html","content":"#### 我们利用2个提供数据获取社区来达到目的\n- [Tushare](https://tushare.pro)金融大数据开放社区（需要注册）\n- [证券宝](http://baostock.com)是一个免费、开源的证券数据平台（无需注册）。\n\n#### 下面上python代码\n> 安装下面模块应该不必多说\n> 创建数据库gupiao\n> 运行下面代码就会得到gp_list_info这张包含所有股票基本信息的表（你也可以存成文件，那就不会要pymysql，sqlalchemy模块）\n> 注意事项：如果安装tushare后，运行报错bs4什么的，你要安装这个模块beautifulsoup4\n````\n#Tushare金融大数据开放社区\nimport tushare as ts\n#操作数据库模块\nimport pymysql\nfrom sqlalchemy import create_engine\n\nts.set_token('你的token')\npro = ts.pro_api()\n#查询当前所有正常上市交易的股票列表\ndata = pro.stock_basic(exchange='', list_status='L', fields='ts_code,symbol,name,area,industry,fullname,enname,market,exchange,curr_type,list_status,list_date,delist_date,is_hs')\n\n#连接数据库\nengine = create_engine('mysql+pymysql://root:@localhost:3306/gupiao?charset=utf8')\n\n# 插入数据\ndata.to_sql('gp_list_info',con=engine,if_exists='append',index=False)\n````\n> 接下来我们试着获取一下baostock提供的数据（用这个主要是没限制，但我没找到获取所有股票列表的接口，所以用上面那个获取一下）\n> 获取【季频盈利能力】\n````\n#证券宝www.baostock.com是一个免费、开源的证券数据平台（无需注册）。\nimport baostock as bs\nimport pandas as pd\nimport pymysql\nfrom sqlalchemy import create_engine\nimport time;\n\n# 登陆系统\nlg = bs.login()\n\n#链接数据库\nengine = create_engine('mysql+pymysql://root:@localhost:3306/gupiao')\n#获取股票代码列表\nsql = ''' select ts_code from gp_list_info; '''\ndf = pd.read_sql_query(sql, engine)\n# 查询季频估值指标盈利能力\n\nyear = [2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018]\nquarter = [1,2,3,4]\nfor index,row in df.iterrows():\n    #这里由于2个编码不一致，转换一下\n    code = row['ts_code'].split('.')\n    code = code[1]+'.'+code[0]\n    for i in range(0,len(year)):\n        for j in range(0,4):            \n            rs_profit = bs.query_profit_data(code=code, year=year[i], quarter=quarter[j])\n            profit_list = []\n            while (rs_profit.error_code == '0') & rs_profit.next():\n                rs_profit.fields.append('year')\n                rs_profit.fields.append('quarter')\n                rs_profit.fields.append('ctime')\n                row_data = rs_profit.get_row_data()\n                row_data.append(year[i])\n                row_data.append(quarter[j])\n                row_data.append(int(time.time()))\n                profit_list.append(row_data)\n                result_profit = pd.DataFrame(profit_list, columns=rs_profit.fields)\n                # 插入数据\n                result_profit.to_sql('gp_profit',con=engine,if_exists='append',index=True)\n    print(index)\n# 登出系统\nbs.logout()\n````\n> OK，运行完后就可以得到2007-2018所有季度的盈利能力数据了","tags":["Python","采集"],"categories":["采集"]},{"title":"TensorFlow初探","url":"/tech-notes/tensorflow-1551755601.html","content":"#### 安装虚拟环境 virtualenv\n> pip install virtualenv\n\n#### 创建虚拟环境\n> virtualenv --system-site-packages -p python .\\Lzz\\TensorFlow\n\n#### 激活虚拟环境\n> cd .\\Lzz\\TensorFlow\\Scripts\n> activate\n\n#### 安装 tensorflow\n> pip install tensorflow\n\n#### 这里安装好使用的时候如果提示**ImportError: DLL load failed: 找不到指定的模块。**\n> pip uninstall tensorflow 把原来最新版本卸载 pip install tensorflow==1.9\n> pip uninstall protobuf 卸载  pip install protobuf==3.6.0\n> ##### 测试了一会，发现只要下面的是3.6.0就可以，不要管tensorflow 1.12.0 has requirement protobuf>=3.6.1, but you'll have protobuf 3.6.0 which is incompatible.这个报错\n> pip install protobuf==3.6.0\n> 这里搞了大半天，太他妈坑了！！！\n\n#### 退出虚拟环境\n> deactivate\n\n#### 资源链接\n链接：https://pan.baidu.com/s/10BGo4NfxQJxGBaKPpcL52Q \n提取码：5yuv ","tags":["Python"],"categories":["随笔"]},{"title":"采集好看短视频","url":"/tech-notes/caiji-1551347404.html","content":"废话不多说，研究了大半天，完成的手动采集，有自己服务器的小伙伴可以自动运行试试\n本地 直接 php haokan.php 就可以了\n````\n<?php\n/**\n * Created by PhpStorm.\n * User: Lzz\n * Date: 2019/2/28\n * Time: 10:03\n */\nclass Haokan {\n    # 配置\n    protected $option = [\n        'url' => 'https://sv.baidu.com/',\n        'header' => [\n            'referer: https://sv.baidu.com/',\n            'user-agent: Mozilla/5.0 (iPhone; CPU iPhone OS 10_3_1 like Mac OS X) AppleWebKit/603.1.30 (KHTML, like Gecko) Version/10.0 Mobile/14E304 Safari/602.1'\n        ],\n    ];\n    # dom\n    protected $xp;\n    # 分类\n    protected $fenlei=[];\n    # 获取到的视频链接\n    protected $vsrc=[];\n\n    public function __construct($option=[])\n    {\n        $this->option = array_merge($this->option,$option);\n    }\n    # 获取分类\n    public function get_fenlei(){\n        $list = $this->c_dom($this->option['url'])->xp->query('//div[@class=\"video-tabs-wrapper\"]/ul/li/a');\n        for($i=0;$i<$list->length;$i++){\n            array_push($this->fenlei,[\n                'href' => $list->item($i)->getAttribute('href'),\n                'name' => $list->item($i)->textContent\n            ]);\n        }\n        return $this;\n    }\n    # 获取分类下的短视频链接\n    public function get_active_sp(){\n        $this->get_fenlei();\n        $t = time();\n        $tt = (time()+1800).'000';\n        foreach ($this->fenlei as $k=>$f){\n            $href = str_replace('#','',$f['href']);\n            $url = \"https://sv.baidu.com/videoui/list/tab?source=wise-channel&pd=&subTab=$href&caller=bdwise\";\n            $list = $this->http_curl($url);\n            preg_match_all('/(?<=data-vsrc=).*?.mp4/',$list,$arr);\n            $this->vsrc[$k] = [\n                'href' => $f['href'],\n                'name' => $f['name'],\n                'list' => [\n\n                ]\n            ];\n            foreach ($arr[0] as $a){\n                if(strlen($a)>255){\n                    unset($a);\n                }\n                array_push($this->vsrc[$k]['list'],str_replace('\\\"','',$a));\n            }\n        }\n        return $this->vsrc;\n    }\n    # 这里你们不需要了\n    # 创建hexo文章\n    public function create_hexo(){\n        $this->get_active_sp();\n        $title = '好看短视频'.date('Ymd');\n        $date = date('Y-m-d H:i:s');\n        $md = <<<MDTITLE\ntitle: $title\nentitle: ''\nauthor: lzz\navatar: /images/favicon.ico\nauthorLink: 'https://lzz1.top'\nauthorAbout: 'https://lzz1.top'\nauthorDesc: \"另一个搬\\U0001F9F1的劳斯基\\U0001F601️️\"\ncategories: 采集\ndate: $date\ntags:\n    - 采集\nkeywords: 采集\ndescription: 好看短视频采集\nphotos:\n---\n\nMDTITLE;\n        foreach ($this->vsrc as $v){\n            $md .= <<<MDCONTENT\n### {$v['name']}\\n\nMDCONTENT;\n            foreach ($v['list'] as $kk=>$vv){\n                if(!empty($vv)){\n                    $md .= <<<MDLIST\n> <video style=\"width:50%;max-height:240px\" controls><source src=\"$vv\" type=\"video/mp4\"/></video>\\n\nMDLIST;\n                }\n            }\n\n        }\n        file_put_contents('source/_posts/'.$title.'.md',$md);\n    }\n\n    # 创建Dom\n    public function c_dom($url){\n        $dom = new DOMDocument('1.0','utf-8');\n        $html = $this->http_curl($url);\n        @$dom->loadHTML($html);\n        $dom->normalize();\n        $xp = new DOMXPath($dom);\n        $this->xp = $xp;\n        return $this;\n    }\n    #\n    public function http_curl($url){\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);//要访问的url\n        curl_setopt($ch,CURLOPT_RETURNTRANSFER,1);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);//https网站取消ssl验证\n        curl_setopt($ch,CURLOPT_FOLLOWLOCATION,1);//允许30*跳转\n        curl_setopt($ch, CURLOPT_TIMEOUT,30);//设置超时时间\n        curl_setopt($ch,CURLOPT_HTTPHEADER,$this->option['header']);\n        $response = curl_exec($ch);\n        if ($response === false) {\n            $error_info =  curl_error($ch);\n            echo $error_info;\n            curl_close($ch);//关闭curl\n            return false;\n        } else {\n            //echo curl_getinfo($ch, CURLINFO_HEADER_OUT);\n            curl_close($ch);//关闭curl\n            return $response;\n        }\n    }\n}\n$haokan = new Haokan();\n$haokan->create_hexo();\n````","tags":["Php"],"categories":["随笔"]},{"title":"php图片Imgick扩展类","url":"/tech-notes/php-1551257711.html","content":"````\nclass Imgick_tool{\n    //Imagick对象实例\n    public $obj = null;\n    public function __construct()\n    {\n        //判断是否加载了该扩展\n        if(!extension_loaded('Imagick'))\n        {\n            return false;\n        }\n        $this->obj = new Imagick();\n    }\n    /*\n\t * png2jpg转换图片格式\n\t *\n\t * @param string src_img 源图片路径\n\t * @param string dest_img 要生成的图片的路径\n\t * @return boolean 转换成共返回true  否则false\n\t */\n    public function png2jpg($src_img,$dest_img)\n    {\n        if(!is_object($this->obj))\n        {\n            return false;\n        }\n        try\n        {\n            $this->obj->readImage($src_img);\n            if($this->obj->writeImage($dest_img))\n            {\n                $this->destory();\n                return $dest_img;\n            }\n            return false;\n        }\n        catch (ImagickException $e)\n        {\n            return false;\n        }\n    }\n    /*\n\t * 去掉图片的profile信息\n\t *\n\t * @param string src_img 源图片路径\n\t * @return string src_img 图片名称 否则返回false\n\t */\n    public function strip_profile($src_img,$dest_img = '')\n    {\n        if(!is_object($this->obj))\n        {\n            return false;\n        }\n        try\n        {\n            $dest_img = empty($dest_img) ? $src_img : $dest_img;\n            $this->obj->readImage($src_img);\n            $this->obj->stripImage ();\n            if($this->obj->writeImage ($dest_img))\n            {\n                $this->destory();\n                return $src_img;\n            }\n            return false;\n        }\n        catch (ImagickException $e)\n        {\n            return false;\n        }\n    }\n    /*\n         * 设置jpg图片质量\n         *\n         * @param string src_img 源图片路径\n         * @param string dest_img 要生成的图片的路径\n         * @return boolean 转换成共返回true  否则false\n         */\n    public function set_quality($src_img,$quality = 70,$dest_img = '')\n    {\n        if(!is_object($this->obj))\n        {\n            return false;\n        }\n        try\n        {\n            $dest_img = empty($dest_img) ? $src_img : $dest_img;\n            $this->obj->readImage($src_img);\n            $this->obj->setImageCompression(Imagick::COMPRESSION_JPEG);\n            $this->obj->setImageCompressionQuality($quality);\n            if($this->obj->writeImage($dest_img))\n            {\n                $this->destory();\n                return $dest_img;\n            }\n            return false;\n        }\n        catch (ImagickException $e)\n        {\n            return false;\n        }\n    }\n    /*\n      * 图片瘦身\n      *\n      * @param string src_img 源图片路径\n      * @param int quality 设置图片压缩质量\n      * @param string dest_img 要生成的图片的路径\n      * @return boolean 转换成共返回true  否则false\n      */\n    public function slimming($src_img,$quality = 60,$dest_img = '')\n    {\n        if(!is_object($this->obj))\n        {\n            return false;\n        }\n        try\n        {\n            $dest_img = empty($dest_img) ? $src_img : $dest_img;\n            $this->obj->readImage($src_img);\n            $this->obj->setImageFormat('jpeg');\n            $this->obj->setImageCompression(Imagick::COMPRESSION_JPEG);\n            //将图片的质量降低到原来的60%\n            $quality = $this->obj->getImageCompressionQuality() * $quality / 100;\n            $this->obj->setImageCompressionQuality($quality);\n            $this->obj->stripImage();\n\n            if($this->obj->writeImage($dest_img))\n            {\n                $this->destory();\n                return $dest_img;\n            }\n            return false;\n        }\n        catch (ImagickException $e)\n        {\n            return false;\n        }\n    }\n    /*\n\t * 生成缩略图\n\t *\n\t * @param string src_img 源图片路径\n\t * @param int quality 设置图片压缩质量\n\t * @param string dest_img 要生成的图片的路径\n\t * @return boolean 转换成共返回true  否则false\n\t */\n    public function thump($src_img,$width = 250,$height = '')\n    {\n        if(!is_object($this->obj))\n        {\n            return false;\n        }\n        try\n        {\n\n            $file_info = pathinfo($src_img);\n            //生成缩略图名称\n            $file_name = substr($file_info['basename'],0,strrpos($file_info['basename'],'.'));\n            $dest_img = $file_info['dirname'] . '/' . $file_name . '_thump.' . $file_info['extension'];\n            $this->obj->readImage($src_img);\n            //计算要获得缩略图的高度\n            $img_width = $this->obj->getImageWidth();\n            $img_height = $this->obj->getImageHeight();\n            $dest_height = $img_height * ($width / $img_width);\n            $this->obj->resizeImage($width, $dest_height, Imagick::FILTER_CATROM, 1, false);\n            //生成图片\n            if($this->obj->writeImage($dest_img))\n            {\n                $this->destory();\n                return $dest_img;\n            }\n            return false;\n        }\n        catch (ImagickException $e)\n        {\n            return false;\n        }\n    }\n    /*\n\t * 释放资源\n\t *\n\t */\n    function destory()\n    {\n        if(is_object($this->obj))\n        {\n            $this->obj->clear();\n\n            $this->obj->destroy();\n        }\n    }\n}\n````","tags":["Php"],"categories":["随笔"]},{"title":"Hexo使用gitalk评论","url":"/tech-notes/gitalk-1551239869.html","content":"今天发现git提供了评论的api，立马舍弃原来的valine😂，毕竟这个站托管在git，当然要全部git化。\n- 申请github应用，点击我**[传送门](https://github.com/settings/applications/new)**\n- 申请好以后，在模板里引入下面代码\n````\n<% if (theme.comments.enable && page.comments){ %>\n<section id=\"comments\">\n    <div id=\"gitalk-container\" style=\"margin: 30px;\"></div>\n    <link rel=\"stylesheet\" href=\"https://unpkg.com/gitalk/dist/gitalk.css\">\n    <script src=\"https://unpkg.com/gitalk/dist/gitalk.min.js\"></script>\n    <script>\n        var gitalk = new Gitalk({\n            clientID: '<%= theme.comments.clientID %>',\n            clientSecret: '<%= theme.comments.clientSecret %>',\n            repo: '<%= theme.comments.repo %>',\n            owner: '<%= theme.comments.owner %>',\n            admin: ['<%= theme.comments.admin.join(',') %>'],\n            id: '<%= page.title %>',      // Ensure uniqueness and length less than 50\n            distractionFreeMode: false  // Facebook-like distraction free mode\n        })\n\n        gitalk.render('gitalk-container')\n    </script>\n</section>\n<% } %>\n````\n- 主题配置\n````\ncomments:\n  enable: true\n  clientID: 上面申请的\n  clientSecret: 上面申请的\n  repo: lnew.github.io  仓库，这是我的，添你自己的\n  owner: lnew 拥有者\n  admin:\n    - lnew 管理员\n````\n#### 好了，这就ok了，用自己github登录初始化一下试试吧","tags":["Hexo"],"categories":["随笔"]},{"title":"转化数组为树形结构","url":"/tech-notes/tree-1551161827.html","content":"````\nfunction list_to_tree($list, $pk='id', $pid = 'pid', $child = 'children', $root = 0, $strict = false) {\n        // 创建Tree\n        $tree = array();\n        if (is_array($list)) {\n            // 创建基于主键的数组引用\n            $refer = array();\n            foreach ($list as $key => $data) {\n                $refer[$data[$pk]] =& $list[$key];\n            }\n            foreach ($list as $key => $data) {\n                // 判断是否存在parent\n                $parent_id = $data[$pid];\n                if ($parent_id === null || (int)$root === $parent_id) {\n                    $tree[] =& $list[$key];\n                } else {\n                    if(isset($refer[$parent_id])){\n                        $parent =& $refer[$parent_id];\n                        $parent[$child][] =& $list[$key];\n                    } else {\n                        if($strict === false){\n                            $tree[] =& $list[$key];\n                        }\n                    }\n                }\n            }\n        }\n        return $tree;\n    }\n````","tags":["Php"],"categories":["随笔"]},{"title":"对商品搜索关键字优化","url":"/tech-notes/-1551078946.html","content":"````\n如遇到，【联想(Lenovo)C1530音箱音响电脑台式机笔记本电脑音箱套装低音炮】这样的名字，查询【联想笔记本】就可以查出来\nif(!empty($keyword)){\n        $i = 0;\n        $where .= \" and g_name like '\";\n        while(mb_substr($keyword,$i, 1, 'utf-8')){\n            $str = mb_substr($keyword, $i, 1, 'utf-8');\n            $where .= \"%{$str}\";\n            $i++;\n        }\n        $where .= \"%'\";\n    }\n````\n","tags":["Php","Mysql"],"categories":["随笔"]},{"title":"Mysql占位查询","url":"/tech-notes/mysql-1551078249.html","content":"````\n$sql = \"SELECT id,name FROM table WHERE 1\"\n假如我要在id和name之间插入一列，还不想重组数据，那就可以在查询的时候占位\n$sql = \"SELECT id,(@title :='') title,name FROM table WHERE 1\"\n$row = db_arr($sql)\n这样查完后，遍历给title赋值\nforeach($row as $v){\n    $v['title'] = \n}\n#强制使用索引--不知道为啥不走索引。。。\nSELECT * from member_order FORCE INDEX(ctime) where ctime>='1546272000'\n````","tags":["Php","Mysql"],"categories":["随笔"]},{"title":"Jstree使用记录","url":"/tech-notes/jstree-1550931747.html","content":"````\n$(\"#treeview\").jstree({\n            \"themes\": {\"stripes\": true},\n            \"checkbox\": {\n                \"keep_selected_style\": false,\n            },\n            \"types\": {\n                \"root\": {\n                    \"icon\": \"fa fa-folder-open\",\n                },\n                \"menu\": {\n                    \"icon\": \"fa fa-folder-open\",\n                },\n                \"file\": {\n                    \"icon\": \"fa fa-file-o\",\n                }\n            },\n            \"plugins\": [\"checkbox\", \"types\"],\n            \"core\": {\n                'check_callback': true,\n                \"data\": {{$tree}}\n    }\n    });\n        //读取选中的条目\n        $.jstree.core.prototype.get_all_checked = function (full) {\n            var obj = this.get_selected(), i, j;\n            for (i = 0, j = obj.length; i < j; i++) { obj = obj.concat(this.get_node(obj[i]).parents); } obj = $.grep(obj, function (v, i, a) { return v != '#'; }); obj = obj.filter(function (itm, i, a) { return i == a.indexOf(itm); }); return full ? $.map(obj, $.proxy(function (i) { return this.get_node(i); }, this)) : obj; }; // if ($(\"#treeview\").size() > 0) {\n//            var r = $(\"#treeview\").jstree(\"get_all_checked\");\n//            $(\"input[name='a_power']\").val(r.join(','));\n//        }\n        //全选和展开\n        $(document).on(\"click\", \"#checkall\", function () {\n            $(\"#treeview\").jstree($(this).prop(\"checked\") ? \"check_all\" : \"uncheck_all\");\n        });\n        $(document).on(\"click\", \"#expandall\", function () {\n            $(\"#treeview\").jstree($(this).prop(\"checked\") ? \"open_all\" : \"close_all\");\n        });\n        $(\"#treeview\").on(\"ready.jstree\", function (e, obj) {   //树创建完成事件\n            //obj.instance.open_all();    //展开所有节点\n        });\n        $(\"#treeview\").on('changed.jstree', function (e, data) {   //选中节点改变事件\n            //获取所有选中项目及子项目\n            var r = $(\"#treeview\").jstree(\"get_all_checked\");\n            $(\"input[name='a_power']\").val(r.join(','));\n        });\n````\n","tags":["Javascript"],"categories":["随笔"]},{"title":"Excel时间戳转换日期","url":"/tech-notes/excel_time-1550931509.html","content":"有时候直接导出数据库数据，时间是时间戳格式的话看起来不方便，有了下面公式\n> =TEXT((C4/1000+8*3600)/86400+70*365+19,\"yyyy-mm-dd hh:mm:ss\")\nC4为时间戳单元格（单位毫秒，秒不用/1000）","tags":["Excel"],"categories":["随笔"]},{"title":"Sql查找重复数据，并保留一条","url":"/tech-notes/sql-1550807545.html","content":"````\n#查询重复数据，和重复次数\nselect id,count(*) as count from table group by 重复字段 having count>1;\n#这里保留ID最大一条记录\nDelete FROM table Where id Not In (SELECT a.id FROM (Select Max(id) id From table Group By 重复字段) a)\n````\n改一改，总会适合你","tags":["Mysql"],"categories":["随笔"]},{"title":"数据表2条数据相邻的时间差","url":"/tech-notes/sql-1550807208.html","content":"````\nfunction run(){\n    $start = date('Ymd');\n    $sql = \"SELECT A.f_id,A.f_mid,A.f_ctime,B.f_ctime,(B.f_ctime-A.f_ctime) diff FROM\n(SELECT f_id,f_mid,f_ctime,(@i := @i + 1) as ord_num from member_fangwen_log a,(select @i := 1) d WHERE f_date={$start} AND f_shichang<0 order by f_mid limit 5000) A\nLEFT JOIN\n(SELECT f_id,f_mid,f_ctime,(@j := @j + 1) as ord_num from member_fangwen_log a,(select @j := 0) c WHERE f_date={$start} AND f_shichang<0 order by f_mid limit 5000) B\non A.ord_num=B.ord_num AND A.f_mid=B.f_mid\";\n    $rows = db_arr($sql);\n    foreach ($rows as $val){\n        !empty($val['diff'])?$val['diff']:$val['diff']=0;\n        $sql = \"UPDATE member_fangwen_log SET f_shichang={$val['diff']} WHERE f_id={$val['f_id']} AND f_shichang<0 limit 1\";\n        $res = db_exec($sql);\n    }\n}\n````\n可以计算出每个用户相邻2条访问记录之间的时长","tags":["Mysql"],"categories":["随笔"]},{"title":"图片上传预览","url":"/tech-notes/upload-1550806771.html","content":"````\n//这里是选择图片的操作\n$('#image').change(function () {\n        var pattern = /(\\.*.jpg$)|(\\.*.png$)|(\\.*.gif$)|(\\.*.jpeg)/;\n        if (!pattern.test($(this).val())) {\n            $('#toast').modal('show');\n            $('.modtis').text('系统仅支持jpg/png/gif格式的照片！');\n            this.focus();\n            $(this).val(\"\");\n            return false;\n        }\n        var file = $(this)[0].files[0];\n        var path = getObjectURL(file);\n        $('#img-thumbnail').attr('src',path);\n    });\n//这个函数为不同浏览器获取图片路径\nfunction getObjectURL(file) {\n    var url = null;\n    if (window.createObjectURL != undefined) { // basic\n        url = window.createObjectURL(file);\n    } else if (window.URL != undefined) { // mozilla(firefox)\n        url = window.URL.createObjectURL(file);\n    } else if (window.webkitURL != undefined) { // webkit or chrome\n        url = window.webkitURL.createObjectURL(file);\n    }\n    return url;\n}\n````","tags":["Javascript"],"categories":["随笔"]},{"title":"Php下载最新版本文件到本地","url":"/tech-notes/php-1550806263.html","content":"比较版本号，然后下载\n````\nif(version_compare($version1,$version2,'<')){\n        $file = $row['a_url'];\n        $filename = basename($file);\n        header(\"Content-type: application/octet-stream\");\n        $ua = $_SERVER[\"HTTP_USER_AGENT\"];\n        $encoded_filename = rawurlencode($filename);\n        if (preg_match(\"/MSIE/\", $ua)) {\n            header('Content-Disposition: attachment; filename=\"' . $encoded_filename . '\"');\n        } else if (preg_match(\"/Firefox/\", $ua)) {\n            header(\"Content-Disposition: attachment; filename*=\\\"utf8''\" . $filename . '\"');\n        } else {\n            header('Content-Disposition: attachment; filename=\"' . $filename . '\"');\n        }\n\n        header(\"Content-Length: \". filesize($file));\n        ob_clean();\n        flush();\n        readfile($file);\n        exit();\n    }\n````\n","tags":["Php"],"categories":["随笔"]},{"title":"Linux后台运行php文件","url":"/tech-notes/linux-1550804225.html","content":"平时会遇到一次性处理大量数据的问题，这是就需要写个脚本去后台自动运行\n````\nnohup php index.php &\n相当于守护进程\n\ntail -f nohup.out\n查看运行情况\n\nps -ef | grep inde.php\n查看进程\n\nps aux\n查看全部进程\n\nkell -9 [pid]\n结束进程\n````\n因为我写的是php文件，所以需要php环境","tags":["Php","Linux"],"categories":["随笔"]},{"title":"图片压缩类库","url":"/tech-notes/image-1550755430.html","content":"今天要批量压缩图片，然后就搜到了一些类和方法，修改了下，试了试，都挺不错，记录一下\n\n#### PHP的类\n```\nclass Imgick_tool{\n    //Imagick对象实例\n    public $obj = null;\n    public function __construct()\n    {\n        //判断是否加载了该扩展\n        if(!extension_loaded('Imagick'))\n        {\n            return false;\n        }\n        $this->obj = new Imagick();\n    }\n    /*\n\t * png2jpg转换图片格式\n\t *\n\t * @param string src_img 源图片路径\n\t * @param string dest_img 要生成的图片的路径\n\t * @return boolean 转换成共返回true  否则false\n\t */\n    public function png2jpg($src_img,$dest_img)\n    {\n        if(!is_object($this->obj))\n        {\n            return false;\n        }\n        try\n        {\n            $this->obj->readImage($src_img);\n            if($this->obj->writeImage($dest_img))\n            {\n                $this->destory();\n                return $dest_img;\n            }\n            return false;\n        }\n        catch (ImagickException $e)\n        {\n            return false;\n        }\n    }\n    /*\n\t * 去掉图片的profile信息\n\t *\n\t * @param string src_img 源图片路径\n\t * @return string src_img 图片名称 否则返回false\n\t */\n    public function strip_profile($src_img,$dest_img = '')\n    {\n        if(!is_object($this->obj))\n        {\n            return false;\n        }\n        try\n        {\n            $dest_img = empty($dest_img) ? $src_img : $dest_img;\n            $this->obj->readImage($src_img);\n            $this->obj->stripImage ();\n            if($this->obj->writeImage ($dest_img))\n            {\n                $this->destory();\n                return $src_img;\n            }\n            return false;\n        }\n        catch (ImagickException $e)\n        {\n            return false;\n        }\n    }\n    /*\n         * 设置jpg图片质量\n         *\n         * @param string src_img 源图片路径\n         * @param string dest_img 要生成的图片的路径\n         * @return boolean 转换成共返回true  否则false\n         */\n    public function set_quality($src_img,$quality = 70,$dest_img = '')\n    {\n        if(!is_object($this->obj))\n        {\n            return false;\n        }\n        try\n        {\n            $dest_img = empty($dest_img) ? $src_img : $dest_img;\n            $this->obj->readImage($src_img);\n            $this->obj->setImageCompression(Imagick::COMPRESSION_JPEG);\n            $this->obj->setImageCompressionQuality($quality);\n            if($this->obj->writeImage($dest_img))\n            {\n                $this->destory();\n                return $dest_img;\n            }\n            return false;\n        }\n        catch (ImagickException $e)\n        {\n            return false;\n        }\n    }\n    /*\n      * 图片瘦身\n      *\n      * @param string src_img 源图片路径\n      * @param int quality 设置图片压缩质量\n      * @param string dest_img 要生成的图片的路径\n      * @return boolean 转换成共返回true  否则false\n      */\n    public function slimming($src_img,$quality = 60,$dest_img = '')\n    {\n        if(!is_object($this->obj))\n        {\n            return false;\n        }\n        try\n        {\n            $dest_img = empty($dest_img) ? $src_img : $dest_img;\n            $this->obj->readImage($src_img);\n            $this->obj->setImageFormat('jpeg');\n            $this->obj->setImageCompression(Imagick::COMPRESSION_JPEG);\n            //将图片的质量降低到原来的60%\n            $quality = $this->obj->getImageCompressionQuality() * $quality / 100;\n            $this->obj->setImageCompressionQuality($quality);\n            $this->obj->stripImage();\n\n            if($this->obj->writeImage($dest_img))\n            {\n                $this->destory();\n                return $dest_img;\n            }\n            return false;\n        }\n        catch (ImagickException $e)\n        {\n            return false;\n        }\n    }\n    /*\n\t * 生成缩略图\n\t *\n\t * @param string src_img 源图片路径\n\t * @param int quality 设置图片压缩质量\n\t * @param string dest_img 要生成的图片的路径\n\t * @return boolean 转换成共返回true  否则false\n\t */\n    public function thump($src_img,$width = 250,$height = '')\n    {\n        if(!is_object($this->obj))\n        {\n            return false;\n        }\n        try\n        {\n\n            $file_info = pathinfo($src_img);\n            //生成缩略图名称\n            $file_name = substr($file_info['basename'],0,strrpos($file_info['basename'],'.'));\n            $dest_img = $file_info['dirname'] . '/' . $file_name . '_thump.' . $file_info['extension'];\n            $this->obj->readImage($src_img);\n            //计算要获得缩略图的高度\n            $img_width = $this->obj->getImageWidth();\n            $img_height = $this->obj->getImageHeight();\n            $dest_height = $img_height * ($width / $img_width);\n            $this->obj->resizeImage($width, $dest_height, Imagick::FILTER_CATROM, 1, false);\n            //生成图片\n            if($this->obj->writeImage($dest_img))\n            {\n                $this->destory();\n                return $dest_img;\n            }\n            return false;\n        }\n        catch (ImagickException $e)\n        {\n            return false;\n        }\n    }\n    /*\n\t * 释放资源\n\t *\n\t */\n    function destory()\n    {\n        if(is_object($this->obj))\n        {\n            $this->obj->clear();\n\n            $this->obj->destroy();\n        }\n    }\n}\n```\n\n#### Python的类\n```\n#coding:utf-8\nfrom PIL import Image\nimport os\nfrom Logger import Logger\nimport imghdr\nimport mmap\nfrom PIL import ImageFile\nImageFile.LOAD_TRUNCATED_IMAGES = True\n\n#检查文件是否被压缩过\ndef checkImageCompressed(savedFilePath,srcFile):\n    f = open(savedFilePath)\n    s = mmap.mmap(f.fileno(), 0, access=mmap.ACCESS_READ)\n    print(srcFile)\n    if s.find(srcFile.encode()) != -1:\n        #print('true')\n        return True\n    else:\n        return False\n\n#判断图片格式\ndef checkImageType(srcFile):\n    #print imghdr.what(srcFile)\n    return imghdr.what(srcFile)\n\n\n#判断是否是图片\ndef isImage(srcFile):\n    suffix = ['jpg','png']\n    #print \"srcFile: \" + srcFile\n    suffix_srcfile = srcFile.lower().split('.')[2]\n    #print \"suffix_srcfile: \" + suffix_srcfile\n    if suffix_srcfile in suffix:\n        return True\n    else:\n        return False\n\n#图片压缩批处理\ndef compressImage(srcPath,dstPath,dataPath):\n    for filename in os.listdir(srcPath):  \n        #如果不存在目的目录则创建一个，保持层级结构\n        if not os.path.exists(dstPath):\n            os.makedirs(dstPath)        \n\n        #拼接完整的文件或文件夹路径\n        srcFile=os.path.join(srcPath,filename)\n        ##print(dstPath,filename)\n        dstFile=os.path.join(dstPath,filename)\n        #print srcFile\n        ##print dstFile\n\n        if os.path.isfile(srcFile):\n            if 'small.' in srcFile:\n                #print \"已经是压缩文件不需要再压缩！！\"\n                logger_ignored.debug(srcFile)\n                continue\n            else:\n                dstFile=os.path.join(dstPath,filename.split('.')[0] + '.' + filename.split('.')[1])\n                #print srcFile\n                #print dstFile       \n        #如果是文件就处理\n        if os.path.isfile(srcFile):\n            if isImage(srcFile):\n                #判断是否是tiff格式，该格式暂不支持\n                if checkImageType(srcFile) == 'tiff':\n                    logger_errored.debug(\"-----start the File is tiff, ignore this file.-----\")\n                    logger_errored.debug(srcFile)\n                    logger_errored.debug(\"-----end the File is tiff, ignore this file.-----\")\n                    continue\n\n                #检查是否压缩过\n                if checkImageCompressed(dataPath,srcFile):\n                    logger_ignored.debug(srcFile)\n                    continue\n                try:\n                    #打开原图片缩小后保存，可以用if srcFile.endswith(\".jpg\")或者split，splitext等函数等针对特定文件压缩\n                    logger_compressed.debug(\"-------start compressed-------\")\n                    logger_compressed.debug(srcFile)\n                    sImg=Image.open(srcFile)  \n                    w,h=sImg.size\n                    logger_compressed.debug(\"src File fomatter: \" + str(w) + \"X\" + str(h) + \"px\")\n                    #print w,h\n                    dImg=sImg.resize((w,h),Image.ANTIALIAS)  #设置压缩尺寸和选项，注意尺寸要用括号\n                    logger_compressed.debug(\"dest File fomatter: \" + str(w) + \"X\" + str(h) + \"px\")\n                        \n                    #转换成RGB模式\n                    #dImg = dImg.convert('RGB')\n                \n                    \n                    dImg.save(dstFile,\"JPEG\",quality=80) #也可以用srcFile原路径保存,或者更改后缀保存，save这个函数后面可以加压缩编码选项JPEG之类的\n                    #print dstFile+\" compressed succeeded\"\n                    logger_compressed.debug(\"-------end compressed-------\")\n                    logger_compressed.debug(\"-------start saved log-------\")\n                    logger_compressed.debug(srcFile)\n                    logger_saved.debug(srcFile)\n                    logger_compressed.debug(\"-------end saved log-------\")\n                except IOError:\n                    print (\"压缩错误\")\n                    logger_errored.debug(\"-------start errored-------\")\n                    logger_errored.debug(\"File name: \" + srcFile)\n                    logger_errored.debug(IOError)\n                    logger_errored.debug(\"-------end errored-------\")\n                \n        #如果是文件夹就递归\n        if os.path.isdir(srcFile):\n            compressImage(srcFile,dstFile,dataPath)\n\nif __name__=='__main__':\n    #记录日志并保存到日志文件\n    logger_compressed = Logger(logname='log/compressed_debug.log', loglevel=1, logger=\"compressedImage\").getlog()\n    logger_saved = Logger(logname='log/compressed_saved.log', loglevel=5, logger=\"compressSucceededImage\").getlog()\n    logger_ignored = Logger(logname='log/compressed_ignored.log', loglevel=1, logger=\"compressIgnoredImage\").getlog()\n    logger_errored = Logger(logname='log/compressed_error.log', loglevel=1, logger=\"compressErroredImage\").getlog()\n    compressImage(\"./img\",\"./image\",\"data/compressed_saved.log\")\n```\n记录日志的类\n```\n# -*- coding: utf-8 -*-\nimport logging\n\n#开发一个日志系统， 既要把日志输出到控制台， 还要写入日志文件   \nclass Logger():\n    def __init__(self, logname, loglevel, logger):\n        '''\n           指定保存日志的文件路径，日志级别，以及调用文件\n           将日志存入到指定的文件中\n        '''\n        format_dict = {\n           1 : logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s'),\n           2 : logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s'),\n           3 : logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s'),\n           4 : logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s'),\n           5 : logging.Formatter('%(message)s')\n        }\n        \n\n        # 创建一个logger\n        self.logger = logging.getLogger(logger)\n        self.logger.setLevel(logging.DEBUG)\n\n        # 创建一个handler，用于写入日志文件\n        fh = logging.FileHandler(logname)\n        fh.setLevel(logging.DEBUG)\n\n        # 再创建一个handler，用于输出到控制台\n        ch = logging.StreamHandler()\n        ch.setLevel(logging.DEBUG)\n\n        # 定义handler的输出格式\n        #formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n        formatter = format_dict[int(loglevel)]\n        fh.setFormatter(formatter)\n        ch.setFormatter(formatter)\n\n        # 给logger添加handler\n        self.logger.addHandler(fh)\n        self.logger.addHandler(ch)\n\n    \n    def getlog(self):\n        return self.logger\n\n##if __name__=='__main__':  \n##    logger = Logger(logname='log.txt', loglevel=1, logger=\"fox\").getlog()\n##    logger.debug(\"foobar\")    # 不输出   \n##    logger.info(\"foobar\")        # 输出  \n##    logger.warning(\"foobar\")  # 输出  \n##    logger.error(\"foobar\")      # 输出  \n##    logger.critical(\"foobar\")    # 输出  \n```","tags":["Php","Python"],"categories":["随笔"]},{"title":"Hexo初学","url":"/tech-notes/hexo-1550644998.html","content":"#### 特别感谢\n\n第一次使用hexo建站，感谢**[hexo](https://hexo.bootcss.com/)，虽然看了文档对一些操作还是很迷糊！最要感谢**[说IT](https://shuoit.net)作者——[唐先森](https://about.tangkunyin.com)，我完全把唐先森的代码搬了下来，然后进行了研究修改，才懂得了一点点要怎么操作！😂，希望唐先森老哥不要介意。\n\n#### 踩的坑\n\n最大的坑，就是 **menu** 这块了\n\n````\nmenu:\n   随笔: tech-notes\n   人文: humanities\n   其他: others\n````\n\n修改后老是找不到页面，最后发现要先运行如下命令\n>hexo new post xxx (文章名称)\n>>默认就可以访问 **tech-notes** 这个菜单，暂时还不知道如何生成文章到 **humanities,others** 下，失败！😱\n>> 访问humanities，就把categories改成人文，然后就可以愉快的访问了\n\n左边菜单的话，运行如下命令\n>hexo new page xxx (新页面)\n\n#### 粗暴修改评论\n\n安装后发现评论显示不出来，网上查看后，说是被墙了，然后百度了新的评论插件，就是**[Valine](https://valine.js.org/)\n1. 前往[Leancloud](https://leancloud.cn)，注册一个账号，创建应用。\n2. 主题配置文件里增加下面信息\n````\ncomments:\n  enable: true #\n  appId:  #your leancloud appId\n  appKey: #your leancloud appKey\n  guest_info: nick,mail,link #valine comment header info\n  placeholder: 友善交流，不喜勿喷 # valine comment input placeholder(like: Please leave your footprints )\n  avatar: mm # gravatar style https://valine.js.org/avatar\n  pageSize: 10 # comment list page size\n  verify: false # valine verify code (true/false)\n  notify: false # valine mail notify (true/false)\n  lang: zh-cn\n````\n3. 到layout->_partial下修改comments.ejs，修改如下\n````\n<% if (theme.comments.enable){ %>\n<section id=\"comments\">\n    <div id=\"valine_thread\" style=\"margin: 30px;\"></div>\n    <script src=\"//cdn1.lncld.net/static/js/3.0.4/av-min.js\"></script>\n    <script src=\"//unpkg.com/valine/dist/Valine.min.js\"></script>\n    <script>\n        var GUEST_INFO = ['nick','mail','link'];\n        var guest_info = '<%= theme.comments.guest_info %>'.split(',').filter(function(item){\n            return GUEST_INFO.indexOf(item) > -1\n        });\n        var notify = '<%= theme.comments.notify %>' == true;\n        var verify = '<%= theme.comments.verify %>' == true;\n        var valine = new Valine();\n        valine.init({\n            el: '#valine_thread',\n            notify: notify,\n            verify: verify,\n            appId: \"<%= theme.comments.appId %>\",\n            appKey: \"<%= theme.comments.appKey %>\",\n            placeholder: \"<%= theme.comments.placeholder %>\",\n            pageSize:'<%= theme.comments.pageSize %>',\n            avatar:'<%= theme.comments.avatar %>',\n            lang:'<%= theme.comments.lang %>'\n        })\n    </script>\n</section>\n<% } %>\n````\n\n#### 强制使用https访问\n\n进入git仓库，点击最右边的Settings，如下图\n![Image text](../img/2019/setting-https.png)\n\n现在可以愉快的自定义了，再次感谢 [唐先森](https://about.tangkunyin.com)","tags":["Hexo","网站"],"categories":["随笔"]}]